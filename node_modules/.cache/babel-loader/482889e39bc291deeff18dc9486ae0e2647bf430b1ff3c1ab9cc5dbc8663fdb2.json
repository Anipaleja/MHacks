{"ast":null,"code":"var _jsxFileName = \"/Users/fional/MHacks/src/index.tsx\";\nimport React from \"react\";\n// The new way to import client-side rendering for React 18+\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\"; // Optional: Import global styles\nimport App from \"./app\"; // Import your main application component\n\n// 1. Find the root element from public/index.html\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst rootElement = document.getElementById(\"root\");\n\n// 2. Check if the root element exists and is an HTMLElement (for TypeScript safety)\nif (!rootElement) {\n  throw new Error('Failed to find the root element with id=\"root\".');\n}\n\n// 3. Create a root and render the application\n// We use the non-null assertion operator '!' here since we checked above\n// or, more strictly, we use the 'if' block to satisfy TypeScript.\nconst root = ReactDOM.createRoot(rootElement);\nroot.render(\n/*#__PURE__*/\n// <React.StrictMode> is a helpful development tool that performs checks\n_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 23,\n  columnNumber: 3\n}, this));\n\n// Optional: If you are using performance tracking (like reportWebVitals in CRA), you would call it here:\n// reportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","jsxDEV","_jsxDEV","rootElement","document","getElementById","Error","root","createRoot","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/fional/MHacks/src/index.tsx"],"sourcesContent":["import React from \"react\";\n// The new way to import client-side rendering for React 18+\nimport ReactDOM from \"react-dom/client\";\n\nimport \"./index.css\"; // Optional: Import global styles\nimport App from \"./app\"; // Import your main application component\n\n// 1. Find the root element from public/index.html\nconst rootElement = document.getElementById(\"root\");\n\n// 2. Check if the root element exists and is an HTMLElement (for TypeScript safety)\nif (!rootElement) {\n  throw new Error('Failed to find the root element with id=\"root\".');\n}\n\n// 3. Create a root and render the application\n// We use the non-null assertion operator '!' here since we checked above\n// or, more strictly, we use the 'if' block to satisfy TypeScript.\nconst root = ReactDOM.createRoot(rootElement);\n\nroot.render(\n  // <React.StrictMode> is a helpful development tool that performs checks\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// Optional: If you are using performance tracking (like reportWebVitals in CRA), you would call it here:\n// reportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,OAAOC,QAAQ,MAAM,kBAAkB;AAEvC,OAAO,aAAa,CAAC,CAAC;AACtB,OAAOC,GAAG,MAAM,OAAO,CAAC,CAAC;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;;AAEnD;AACA,IAAI,CAACF,WAAW,EAAE;EAChB,MAAM,IAAIG,KAAK,CAAC,iDAAiD,CAAC;AACpE;;AAEA;AACA;AACA;AACA,MAAMC,IAAI,GAAGR,QAAQ,CAACS,UAAU,CAACL,WAAW,CAAC;AAE7CI,IAAI,CAACE,MAAM;AAAA;AACT;AACAP,OAAA,CAACJ,KAAK,CAACY,UAAU;EAAAC,QAAA,eACfT,OAAA,CAACF,GAAG;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACS,CACpB,CAAC;;AAED;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}